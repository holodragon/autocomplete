apiVersion: v1
kind: Template
labels:
  template: cicd
  group: cicd
metadata:
  annotations:
    description: Creates the CI/CD for Autocomplete
    iconClass: icon-jenkins
    tags: instant-app,jenkins,gogs,nexus,cicd
  name: cicd
message: Creates the CI/CD for Autocomplete
parameters:
- description: Project id of Dev environment
  displayName: Dev Project ID
  value: dev
  name: DEV_PROJECT
  required: true
- description: Project id of Test environment
  displayName: Test Project ID
  value: test
  name: TEST_PROJECT
  required: true
objects:
# Pipeline
- apiVersion: v1
  kind: BuildConfig
  metadata:
    annotations:
      pipeline.alpha.openshift.io/uses: '[{"name": "jenkins", "namespace": "", "kind": "DeploymentConfig"}]'
    labels:
      app: cicd-pipeline
      name: cicd-pipeline
    name: autocomplete-pipeline
  spec:
    triggers:
      - type: GitHub
        github:
          secret: ${WEBHOOK_SECRET}
      - type: Generic
        generic:
          secret: ${WEBHOOK_SECRET}
    runPolicy: Serial
    source:
      type: None
    strategy:
      jenkinsPipelineStrategy:
        env:
          - name: "DEV_PRJ"
            value: "${DEV_PROJECT}"
          - name: "TEST_PRJ"
            value: "${TEST_PROJECT}"
        jenkinsfile: |-
            def version, mvnCmd = "mvn -s configuration/cicd-settings.xml"

            pipeline {
             agent {
               label 'maven'
             }
             // define commands
             stages {
              stage('Build App') {
                 steps {
                   git branch: 'master', url: 'https://github.com/holodragon/autocomplete.git'
                   script {
                       def pom = readMavenPom file: 'pom.xml'
                       version = pom.version
                   }
                   sh "${mvnCmd} install -DskipTests=true"
              }
              }
              # stage('Test') {
              #    steps {
              #      sh "${mvnCmd} test"
              #      step([$class: 'JUnitResultArchiver', testResults: '**/target/surefire-reports/TEST-*.xml'])
              #    }
              # }
              # stage('Code Analysis') {
              #    steps {
              #      script {
              #        sh "${mvnCmd} sonar:sonar -Dsonar.host.url=http://sonarqube:9000 -DskipTests=true"
              #      }
              #    }
              # }

              stage('Check and Create Image Builder') {
                 when {
                   expression {
                     openshift.withCluster() {
                       openshift.withProject(env.DEV_PRJ) {
                         return !openshift.selector("bc", "autocomplete").exists();
                       }
                     }
                   }
                 }
                 steps {
                   script {
                     openshift.withCluster() {
                       openshift.withProject(env.DEV_PRJ) {
                         openshift.newBuild("--name=autocomplete", "--image-stream=redhat-openjdk18-openshift:latest", "--binary=true")
                       }
                     }
                   }
                 }
               }

              stage('Build Image') {
                 steps {
                   sh "rm -rf oc-build && mkdir -p oc-build/deployments"
                   sh "cp target/*.jar oc-build/deployments/"

                   script {
                     openshift.withCluster() {
                       openshift.withProject(env.DEV_PRJ) {
                         openshift.selector("bc", "autocomplete").startBuild("--from-dir=oc-build", "--wait=true")
                       }
                     }
                   }
                 }
              }
              stage('Check and Create DEV') {
                 when {
                   expression {
                     openshift.withCluster() {
                       openshift.withProject(env.DEV_PRJ) {
                         return !openshift.selector('dc', 'autocomplete').exists()
                       }
                     }
                   }
                 }
                 steps {
                   script {
                     openshift.withCluster() {
                       openshift.withProject(env.DEV_PRJ) {
                         def app = openshift.newApp("autocomplete:latest")
                         app.narrow("svc").expose();

                         def dc = openshift.selector("dc", "autocomplete")
                         while (dc.object().spec.replicas != dc.object().status.availableReplicas) {
                             sleep 10
                         }
                         openshift.set("triggers", "dc/autocomplete", "--manual")
                       }
                     }
                   }
                 }
              }
              stage('Deploy DEV') {
                 steps {
                   script {
                     openshift.withCluster() {
                       openshift.withProject(env.DEV_PRJ) {
                         openshift.selector("dc", "autocomplete").rollout().latest();
                       }
                     }
                   }
                 }
              }
              stage('Promote to TEST?') {
                 steps {
                   timeout(time:15, unit:'MINUTES') {
                       input message: "Promote to TEST?", ok: "Promote"
                   }

                   script {
                     openshift.withCluster() {
                       openshift.tag("${env.DEV_PRJ}/autocomplete:latest", "${env.TEST_PRJ}/autocomplete:${version}")
                     }
                   }
                 }
               }
              stage('Deploy TEST') {
                 steps {
                   script {
                     openshift.withCluster() {
                       openshift.withProject(env.TEST_PRJ) {
                         if (openshift.selector('dc', 'autocomplete').exists()) {
                           openshift.selector('dc', 'autocomplete').delete()
                           openshift.selector('svc', 'autocomplete').delete()
                           openshift.selector('route', 'autocomplete').delete()
                         }

                         openshift.newApp("autocomplete:${version}").narrow("svc").expose()
                       }
                     }
                   }
                 }
               }
             }
            }
      type: JenkinsPipeline
