apiVersion: v1
kind: Template
labels:
  template: cicd
  group: cicd
metadata:
  annotations:
    description: Creates the CI/CD for Autocomplete
    iconClass: icon-jenkins
    tags: instant-app,jenkins,gogs,nexus,cicd
  name: cicd
message: Creates the CI/CD for Autocomplete
parameters:
- description: Project id of Dev environment
  displayName: Dev Project ID
  value: dev
  name: DEV_PROJECT
  required: true
- description: Project id of Test environment
  displayName: Test Project ID
  value: test
  name: TEST_PROJECT
  required: true
objects:
# Pipeline
- apiVersion: v1
  kind: BuildConfig
  metadata:
    annotations:
      pipeline.alpha.openshift.io/uses: '[{"name": "jenkins", "namespace": "", "kind": "DeploymentConfig"}]'
    labels:
      app: cicd-pipeline
      name: cicd-pipeline
    name: autocomplete-pipeline
  spec:
    triggers:
      - type: GitHub
        github:
          secret: ${WEBHOOK_SECRET}
      - type: Generic
        generic:
          secret: ${WEBHOOK_SECRET}
    runPolicy: Serial
    source:
      type: None
    strategy:
      jenkinsPipelineStrategy:
        env:
          - name: "DEV_PRJ"
            value: "${DEV_PROJECT}"
          - name: "TEST_PRJ"
            value: "${TEST_PROJECT}"
        jenkinsfile: |-
          node('mvn') {
             // define commands
             def mvnCmd = "mvn -s configuration/cicd-settings.xml"

             stage ('Build') {
               git branch: 'master', url: 'https://github.com/holodragon/autocomplete.git'
               sh "${mvnCmd} clean install -DskipTests=true"
             }

             stage ('Test') {
               sh "${mvnCmd} test"
               step([$class: 'JUnitResultArchiver', testResults: '**/target/surefire-reports/TEST-*.xml'])
             }

             stage ('Push to Nexus') {
              sh "${mvnCmd} deploy -DskipTests=true"
             }

             stage ('Deploy DEV') {
               sh "rm -rf oc-build && mkdir -p oc-build/deployments"
               sh "cp target/*.jar oc-build/deployments/"
               // build image
               sh "oc start-build autocomplete --from-dir=oc-build --wait=true -n ${DEV_PROJECT}"
             }

             stage ('Deploy TEST') {
               timeout(time:15, unit:'MINUTES') {
                  input message: "Promote to TEST?", ok: "Promote"
               }

               def v = version()
               // tag for stage
               sh "oc tag ${DEV_PROJECT}/autocomplete:latest ${TEST_PROJECT}/autocomplete:${v}"
             }
          }

          def version() {
            def matcher = readFile('pom.xml') =~ '<version>(.+)</version>'
            matcher ? matcher[0][1] : null
          }
      type: JenkinsPipeline
