apiVersion: v1
kind: Template
labels:
  template: cicd
  group: cicd
metadata:
  annotations:
    description: Creates the CI/CD for Application
    iconClass: icon-jenkins
    tags: instant-app,jenkins,gogs,nexus,cicd
  name: cicd
message: Creates the CI/CD for Application
objects:
# Pipeline
- apiVersion: v1
  kind: BuildConfig
  metadata:
    annotations:
      pipeline.alpha.openshift.io/uses: '[{"name": "jenkins", "namespace": "", "kind": "DeploymentConfig"}]'
    labels:
      app: cicd-pipeline
      name: cicd-pipeline
    name: ${APPLICATION_NAME}-pipeline
  spec:
    triggers:
      - type: GitHub
        github:
          secret: ${WEBHOOK_SECRET}
      - type: Generic
        generic:
          secret: ${WEBHOOK_SECRET}
    runPolicy: Serial
    source:
      type: None
    strategy:
      jenkinsPipelineStrategy:
        env:
          - name: "APP_NAME"
            value: "${APPLICATION_NAME}"
          - name: "DEV_PRJ"
            value: "${DEV_PROJECT}"
          - name: "STAGE_PRJ"
            value: "${STAGE_PROJECT}"
          - name: "PROD_PRJ"
            value: "${PROD_PROJECT}"
          - name: "SRC_URL"
            value: "${SOURCE_URL}"
          - name: "SRC_BRANCH"
            value: "${SOURCE_BRANCH}"
          - name: "LOCAL_NEXUS"
            value: "${LOCAL_NEXUS}"
        jenkinsfile: |-
            def version, mvnCmd = "mvn -s configuration/cicd-settings.xml"
            if ("${env.LOCAL_NEXUS}"=="true") {
              mvnCmd = "mvn -s configuration/cicd-settings-local.xml"
            }

            pipeline {
             agent {
               label 'maven'
             }
             // define commands
             stages {
              stage('Build App') {
                 steps {
                   git branch: "${env.SRC_BRANCH}", url: "${env.SRC_URL}"
                   script {
                       def pom = readMavenPom file: 'pom.xml'
                       version = pom.version
                   }
                   sh "${mvnCmd} package -DskipTests=true"
              }
              }
              // stage('Test') {
              //    steps {
              //      sh "${mvnCmd} test"
              //      step([$class: 'JUnitResultArchiver', testResults: '**/target/surefire-reports/TEST-*.xml'])
              //    }
              // }
              // stage('Code Analysis') {
              //    steps {
              //      script {
              //        sh "${mvnCmd} sonar:sonar -Dsonar.host.url=http://sonarqube:9000 -DskipTests=true"
              //      }
              //    }
              // }

              stage('Check and Create Image Builder') {
                 when {
                   expression {
                     openshift.withCluster() {
                       openshift.withProject(env.DEV_PRJ) {
                         return !openshift.selector("bc", "${env.APP_NAME}").exists();
                       }
                     }
                   }
                 }
                 steps {
                   script {
                     openshift.withCluster() {
                       openshift.withProject(env.DEV_PRJ) {
                         openshift.newBuild("--name=${env.APP_NAME}", "--image-stream=redhat-openjdk18-openshift:latest", "--binary=true")
                       }
                     }
                   }
                 }
               }

              stage('Build Image') {
                 steps {
                   sh "rm -rf oc-build && mkdir -p oc-build/deployments"
                   sh "cp target/*.jar oc-build/deployments/"

                   script {
                     openshift.withCluster() {
                       openshift.withProject(env.DEV_PRJ) {
                         openshift.selector("bc", "${env.APP_NAME}").startBuild("--from-dir=oc-build", "--wait=true")
                       }
                     }
                   }
                 }
              }
              stage('Check and Create DEV') {
                 when {
                   expression {
                     openshift.withCluster() {
                       openshift.withProject(env.DEV_PRJ) {
                         return !openshift.selector('dc', "${env.APP_NAME}").exists()
                       }
                     }
                   }
                 }
                 steps {
                   script {
                     openshift.withCluster() {
                       openshift.withProject(env.DEV_PRJ) {
                         def app = openshift.newApp("${env.APP_NAME}:latest")
                         app.narrow("svc").expose();

                         def dc = openshift.selector("dc", "${env.APP_NAME}")
                         while (dc.object().spec.replicas != dc.object().status.availableReplicas) {
                             sleep 10
                         }
                         openshift.set("triggers", "dc/${env.APP_NAME}", "--manual")
                       }
                     }
                   }
                 }
              }
              stage('Deploy DEV') {
                 steps {
                   script {
                     openshift.withCluster() {
                       openshift.withProject(env.DEV_PRJ) {
                         openshift.selector("dc", "${env.APP_NAME}").rollout().latest();
                       }
                     }
                   }
                 }
              }
              stage('Promote to next STAGE?') {
                 steps {
                   timeout(time:15, unit:'MINUTES') {
                       input message: "Promote to next STAGE?", ok: "Promote"
                   }

                   script {
                     openshift.withCluster() {
                       openshift.tag("${env.DEV_PRJ}/${env.APP_NAME}:latest", "${env.STAGE_PRJ}/${env.APP_NAME}:latest")
                     }
                   }
                 }
               }
              stage('Deploy STAGE') {
                 steps {
                   script {
                     openshift.withCluster() {
                       openshift.withProject(env.STAGE_PRJ) {
                         openshift.selector("dc", "${env.APP_NAME}").rollout().latest();
                       }
                     }
                   }
                 }
               }
             }
            }
      type: JenkinsPipeline
parameters:
- description: Application Name
  displayName: Application Name
  value: autocomplete
  name: APPLICATION_NAME
  required: true
- description: Project id of DEV environment
  displayName: Dev Project ID
  value: dev
  name: DEV_PROJECT
  required: true
- description: Project id of STAGE environment
  displayName: Test Project ID
  value: stage
  name: STAGE_PROJECT
  required: true
- description: Project id of PROD environment
  displayName: Test Project ID
  value: prod
  name: PROD_PROJECT
  required: true
- description: MAVEN mirror host
  displayName: MAVEN MIRROR URL
  name: MAVEN_MIRROR_URL
  value: http://nexus-cicd.apps.example.com/content/groups/public/
- description: Java project source
  displayName: Java project source
  name: SOURCE_URL
  value: https://github.com/holodragon/autocomplete.git
  required: true
- description: Java project source branch
  displayName: Java project source branch
  name: SOURCE_BRANCH
  value: master
  required: true
- description: Local nexus mirror
  displayName: Flag for local nexus mirror
  name: LOCAL_NEXUS
  value: "true"
